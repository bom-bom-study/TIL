# 토비의 스프링 3.1 Vol.1
## 6장 : AOP 

### 6.1. 트랜잭션 코드의 분리
- 트랜잭션에서 비즈니스 로직을 담당하는 코드를 메소드로 추출
=> 트랜잭션을 담당하는 기술적인 코드가 UserService내에 있는 문제
=> 트랜잭션 코드를 클래스 밖으로 뽑아내자

- DI 적용을 이용한 트랜잭션 분리
    - DI : 실제 사용할 오브젝트의 클래스 정체는 감춘 채, 인터페이스를 통해 간접적으로 접근
    => UserService를 인터페이스로 만들고, 이를 구현하는 UserServiceImpl을 만든다
    => UserService를 구현하는 UserServiceTx 를 만들어 트랜잭션의 경계설정을 담당시킨다.
    => TransactionManager 라는 이름의 빈으로 등록된 트랜잭션 매니저를 DI로 받아뒀다가, 트랜잭션 안에서 동작하도록 만들어줘야하는 메소드 호출의 전과 후에 필요한 트랜잭션 경계설정 API를 사용해주면 된다.

### 6.2. 고립된 단위 테스트
- 가장 편하고 좋은 테스트 방법은 가능한 한 작은 단위로 쪼개서 테스트하는 것
- 그 원인을 찾기가 쉽다!

#### 6.2.1. 복잡한 의존관계 속의 테스트
- 여러개를 의존하는 경우, 배보다 배꼽이 더 큰경우 발생
#### 6.2.2. 테스트 대상 오브젝트 고립시키기
- 테스트를 위한 대역을 사용하자!
- UserServiceImpl 을 고립시키자
- UserServiceImpl을 테스를 위해 만들어진 MockUserDao, MockMailSender에만 의존하게 만든다



- 테스트 스텁 : 테스트 대상의 코드가 정상적으로 수행되도록 도와줌
- 목 오브젝트 : 뿐만 아니라, 부가적인 검증기능까지 가능

